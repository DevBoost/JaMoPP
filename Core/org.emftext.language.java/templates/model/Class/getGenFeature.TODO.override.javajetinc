<%
org.eclipse.emf.ecore.EStructuralFeature eFeature = genFeature.getEcoreFeature();
org.eclipse.emf.ecore.EAnnotation genModelAnnotation = eFeature.getEAnnotation("http://www.eclipse.org/emf/2002/GenModel");
String featureName = null;
String featureAccessor = null;
org.eclipse.emf.codegen.ecore.genmodel.GenClass boxClass = null;
String boxAccessor = null;

if (genModelAnnotation != null) {
	featureName = (String)genModelAnnotation.getDetails().get("derivedFromExtensibleFeature");
	org.eclipse.emf.codegen.ecore.genmodel.GenFeature extensibleFeature = null;
	for(org.eclipse.emf.codegen.ecore.genmodel.GenFeature cand : genFeature.getGenClass().getGenFeatures()) {
		if (cand.getName().equals(featureName)) {
			extensibleFeature = cand;
			featureAccessor = cand.getGetAccessor();
		}
	}
	if (eFeature.getEType() instanceof org.eclipse.emf.ecore.EDataType) {
		String boxClassName = genFeature.getGenClass().getName() + genFeature.getName().substring(0,1).toUpperCase() + genFeature.getName().substring(1);
		for(org.eclipse.emf.codegen.ecore.genmodel.GenPackage pcand : genFeature.getGenClass().getGenPackage().getSubGenPackages()) {
			if (pcand.getEcorePackage().getName().equals("ptypes")) {
				for(org.eclipse.emf.codegen.ecore.genmodel.GenClass ccand : pcand.getGenClasses()) {
					if (ccand.getName().equals(boxClassName)) {
						boxClass = ccand;
					}
				}		
			}
		}
		boxAccessor = featureAccessor;
		if (genFeature.isBooleanType()) { 
			featureAccessor = "isValue";
		}
		else {
			featureAccessor = "getValue";
		}
	}
	else {
		String boxClassName = genFeature.getGenClass().getName() + genFeature.getName().substring(0,1).toUpperCase() + genFeature.getName().substring(1);
		for(org.eclipse.emf.codegen.ecore.genmodel.GenPackage pcand : genFeature.getGenClass().getGenPackage().getSubGenPackages()) {
			if (pcand.getEcorePackage().getName().equals("rtypes")) {
				for(org.eclipse.emf.codegen.ecore.genmodel.GenClass ccand : pcand.getGenClasses()) {
					if (ccand.getName().equals(boxClassName)) {
						boxClass = ccand;
					}
				}	
			}
		}
		if (boxClass != null) {
			boxAccessor = featureAccessor;
			featureAccessor = "getValue";
		}
	}
}
%>
<% if (featureAccessor == null) { %>
		// TODO: implement this method
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
<% } else if (boxAccessor != null && boxClass != null) { %>
	<% if (eFeature.isMany()) { %>
		EList<?> list = <%=boxAccessor%>();
		<%=genFeature.getType(null)%> result = new org.eclipse.emf.common.util.BasicEList<<%=genFeature.getTypeGenClassifier().getRawInstanceClassName()%>>();
		for(Object value : list) {
			if (!(value instanceof <%=boxClass.getQualifiedInterfaceName()%>	)) {
				return org.eclipse.emf.common.util.ECollections.emptyEList();
			}
			else {
				result.add(((<%=boxClass.getQualifiedInterfaceName()%>)value).<%=featureAccessor%>());
			}
		}
		//TODO make result an (un)wrapping list
		return result;
	<% } else { %> 
		Object value = <%=boxAccessor%>();
		if (value instanceof <%=boxClass.getQualifiedInterfaceName()%>) {
			return ((<%=boxClass.getQualifiedClassName()%>) value).<%=featureAccessor%>();
		}
		<% if (genFeature.isBooleanType()) { %>
		return false;
		<% } else if ("char".equals(genFeature.getType(null))) { %>
		return ' ';
		<% } else if (genFeature.isPrimitiveType()) { %> 
		return -1;
		<% } else { %> 
		return null;
		<% } %> 
	<% } %>
<% } else { %>
	<% if (eFeature.isMany()) { %>
		EList<?> list = <%=featureAccessor%>();
		for(Object value : list) {
			if (!(value instanceof <%=genFeature.getTypeGenClass().getQualifiedInterfaceName()%>)) {
				return org.eclipse.emf.common.util.ECollections.emptyEList();
			}
		}	
		return (<%=genFeature.getType(null)%>) list;
	<% } else { %> 
		Object value = <%=featureAccessor%>(); 
		if (value instanceof <%=genFeature.getTypeGenClass().getQualifiedInterfaceName()%>) {
			return (<%=genFeature.getTypeGenClass().getQualifiedInterfaceName()%>) value;
		}
		return null;
	<% } %>
<% } %>