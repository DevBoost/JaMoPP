epackage java.members;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;

import java.expressions.Expression;
import java.parameters.Parameter;
import java.parameters.VariableLengthParameter;
import java.references.MethodCall;
import java.types.Type;
import java.classifiers.ConcreteClassifier;

eclass Method {
	
	/**
	 * Decides if the given method matches the given call. 
	 * 
	 * @param methodCall
	 * @return
	 */
	isSomeMethodForCall() {
		return isMethodForCall(methodCall, false);
	}

	/**
	 * Only returns true if the given Method is a better match for the given calls than the
	 * otherMethod given.
	 * 
	 * @param otherMethod
	 * @param methodCall
	 * @return
	 */
	isBetterMethodForCall() {
		if (!isMethodForCall(methodCall, false)) {
			return false;
		}
		if (otherMethod.isMethodForCall(methodCall, true)) {
			if (isMethodForCall(methodCall, true)) {
				//we both match perfectly; lets compare our return types
				Type target = getTypeReference().getTarget();
				if (target instanceof ConcreteClassifier) {
					if (((ConcreteClassifier) target).getAllSuperClassifiers().contains(
							otherMethod.getTypeReference().getTarget())) {
						// I am the more concrete type
						return true;
					}
				}
			}
			//the other already matches perfectly; I am not better
			return false;
		}
		if (!otherMethod.isMethodForCall(methodCall, false)) {
			//I match, but the other does not
			return true;
		}
		//we both match, I am only better if I match perfectly <- 
		//TODO #763: this is not enough: we need to check for "nearest subtype" here
		return isMethodForCall(methodCall, true);
	}

	isMethodForCall() {
		EList<Type> argumentTypeList = methodCall.getArgumentTypes();
		EList<Parameter> parameterList = new BasicEList<Parameter>(this.getParameters());
		
		EList<Type> parameterTypeList = new BasicEList<Type>();
		for(Parameter parameter : parameterList)  {
			//determine types before messing with the parameters
			parameterTypeList.add(
					parameter.getTypeReference().getBoundTarget(methodCall));
		}

		if (!parameterList.isEmpty()) {
			Parameter lastParameter = parameterList.get(parameterList.size() - 1);
			Type lastParameterType  = parameterTypeList.get(parameterTypeList.size() - 1);;
			if (lastParameter instanceof VariableLengthParameter) {
				//in case of variable length add/remove some parameters
				while(parameterList.size() < argumentTypeList.size()) {
					if (needsPerfectMatch) return false;
					parameterList.add(lastParameter);
					parameterTypeList.add(lastParameterType);
				}
				if(parameterList.size() > argumentTypeList.size()) {
					if (needsPerfectMatch) return false;
					parameterList.remove(lastParameter);
					parameterTypeList.remove(parameterTypeList.size() - 1);
				}
				
			}
		}
		
		if (parameterList.size() == argumentTypeList.size()) { 
			boolean parametersMatch = true;
			for (int i = 0; i < argumentTypeList.size(); i++) {
				Parameter  parameter = parameterList.get(i);
				Expression argument = methodCall.getArguments().get(i);

				Type parameterType = parameterTypeList.get(i);
				Type argumentType  = argumentTypeList.get(i);
				
				if (argumentType == null || parameterType == null) {
					return false;
				}
				
				if (parameterType != null && argumentType != null) {
					if (!parameterType.eIsProxy() || !argumentType.eIsProxy()) {
						if (needsPerfectMatch) {
							parametersMatch = parametersMatch
								&& argumentType.equalsType(argument.getArrayDimension(),
										parameterType, parameter.getArrayDimension());
						}
						else {
							parametersMatch = parametersMatch 
								&& argumentType.isSuperType(argument.getArrayDimension(),
										parameterType, parameter);
						}
					}
					else {
						return false;
					}
				}
				else {
					return false;
				}
			}
			return parametersMatch; 
		} 
		return false;		
	}

	getArrayDimension() {
		long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();
		if (this instanceof VariableLengthParameter) {
			size++;
		}
		return size;
	}
	
}
