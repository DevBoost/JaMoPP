epackage java.variables;

import java.parameters.VariableLengthParameter;
import java.statements.ExpressionStatement;
import java.references.IdentifierReference;
import java.references.MethodCall;
import java.references.ReferenceableElement;
import java.members.MemberContainer;
import java.members.Method;
import java.types.Type;

eclass Variable {

	getArrayDimension() {
		long size = this.getArrayDimensionsBefore().size() + this.getArrayDimensionsAfter().size();
		if (this instanceof VariableLengthParameter) {
			size++;
		}
		return size;
	}
	
	/**
	 * Creates a statement that calls the method with the given name on this
	 * variable. If the variable's type does not offer such a method, null is
	 * returned.
	 */
	createMethodCallStatement() {
		
		ExpressionStatement callStatement = #ExpressionStatement;
		callStatement.setExpression(createMethodCall(methodName, arguments));
		return callStatement;
	}

	/**
	 * Creates an expression that calls the method with the given name on this
	 * variable. If the variable's type does not offer such a method, null is
	 * returned.
	 */
	createMethodCall() {
		
		IdentifierReference thisRef = #IdentifierReference;
		thisRef.setTarget(this);
		MethodCall methodCall = #MethodCall;
		Type thisType = getTypeReference().getTarget();
		if (thisType instanceof MemberContainer) {
			MemberContainer castedType = (MemberContainer) thisType;
			Method method = castedType.getContainedMethod(methodName);
			if (method == null) {
				return null;
			}
			methodCall.setTarget(method);
			// add arguments
			methodCall.getArguments().addAll(arguments);
			thisRef.setNext(methodCall);
			return thisRef;
		} else {
			return null;
		}
	}
}