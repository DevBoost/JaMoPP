epackage java.containers;

import java.classifiers.ConcreteClassifier;
import java.classifiers.Class;
import java.classifiers.Interface;
import java.classifiers.Annotation;
import java.classifiers.Enumeration;
import java.containers.*;
import java.imports.*;

import org.eclipse.emf.common.util.EList;
import org.emftext.language.java.util.UniqueEList;

eclass CompilationUnit {
	
	/**
	 * @param name name of the contained Classifier
	 * @return the Classifier
	 */
	getContainedClassifier() {
		if (name == null) {
			return null;
		}
		for(ConcreteClassifier candidate : getClassifiers()) {
			if(name.equals(candidate.getName())) {
				return candidate;
			}
		}
		return null;
	}
	
	/**
	 * @return all classes in the same package imports
	 */
	getClassifiersInSamePackage() {
		EList<ConcreteClassifier> defaultImportList = new UniqueEList<ConcreteClassifier>();
		
		String packageName = getNamespacesAsString();

		//locally defined in this container
		defaultImportList.addAll(getClassifiers());
		
		defaultImportList.addAll(getConcreteClassifierProxies(
				packageName, "*"));

		return defaultImportList;
	}
	
	/**
	 * @return the only class contained directly in the compilation unit (if one exists)
	 */
	getContainedClass() {
		if (getClassifiers().size() != 1) {
			return null;
		}
		if (getClassifiers().get(0) instanceof Class) {
			return (Class) getClassifiers().get(0);
		}
		return null;
	}
	
	/**
	 * @return the only interface contained directly in the compilation unit (if one exists)
	 */
	getContainedInterface() {
		if (getClassifiers().size() != 1) {
			return null;
		}
		if (getClassifiers().get(0) instanceof Interface) {
			return (Interface) getClassifiers().get(0);
		}
		return null;
	}

	/**
	 * @return the only annotation contained directly in the compilation unit (if one exists)
	 */
	getContainedAnnotation() {
		if (getClassifiers().size() != 1) {
			return null;
		}
		if (getClassifiers().get(0) instanceof Annotation) {
			return (Annotation) getClassifiers().get(0);
		}
		return null;
	}
	
	/**
	 * @return the only enumeration contained directly in the compilation unit (if one exists)
	 */
	getContainedEnumeration() {
		if (getClassifiers().size() != 1) {
			return null;
		}
		if (getClassifiers().get(0) instanceof Enumeration) {
			return (Enumeration) getClassifiers().get(0);
		}
		return null;
	}

	
	/**
	 * Adds an import of the given class to this compilation unit.
	 */
	addImport() {
		ClassifierImport import_ = #ClassifierImport;
		ConcreteClassifier classToImport = getConcreteClassifier(nameOfClassToImport);
		import_.setClassifier(classToImport);
		import_.getNamespaces().addAll(classToImport.getContainingCompilationUnit().getNamespaces());
		getImports().add(import_);
	}
	
	/**
	 * Adds an import of the given package to this compilation unit.
	 */
	addPackageImport() {
		PackageImport nsImport = #PackageImport;
		for (String name : packageName.split("\\.")) {
			nsImport.getNamespaces().add(name);
		}
		getImports().add(nsImport);
	}
}
