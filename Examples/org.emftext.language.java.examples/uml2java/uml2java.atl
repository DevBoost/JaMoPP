--@atlcompiler atl2006 
module uml2java;
create OUT : java from  IN : uml;

helper context uml!Element def: correctType(outerType : Boolean) : java!Classifier = 
	 if (self.type = OclUndefined)  then OclUndefined else
	 if (self.upper <> 1 and outerType)  then java!Commentable.allInstances()->first().getConcreteClassifier('java.util.List') else 	
	 if (self.type.name = 'String') then java!Commentable.allInstances()->first().getStringClass() else
     self.type 
	 endif endif endif;

rule Class {
	from umlClass : uml!Class 
	to javaClass : java!Class (
		name <- umlClass.name,
		members <- umlClass.ownedAttribute
		              ->union(umlClass.ownedOperation)
		              ->union(
		              	 umlClass.package.packagedElement
						   ->select(e | e.oclIsTypeOf(uml!Association))
						   ->select(e | e.memberEnd->select(end | end.type = umlClass)->size() > 0)
						   ->collect(e | e.memberEnd)->flatten()->select(end | end.type <> umlClass)
					  ),
		"extends" <-  if umlClass.generalization->size() > 0 then typeRef
					  else OclUndefined endif
	),
    cu : java!CompilationUnit (
    	namespaces <- umlClass.package.name.split('\\.'),
		classifiers <- Sequence{javaClass}
	),
	typeRef : java!ClassifierReference (
		target <- if umlClass.generalization->size() > 0
			then umlClass.generalization->at(1).general
			else OclUndefined
			endif
	)
}

rule Property {
	from umlProperty : uml!Property
	to javaField : java!Field (
		name <- umlProperty.name,
		annotationsAndModifiers <- protected,
		typeReference <- if umlProperty.type = OclUndefined  then
					voidType
				  else
				  	typeRef1
				  endif
	),
	protected : java!Protected(
	),
	voidType : java!Void (
	),
	typeRef1 : java!ClassifierReference (
		target <- umlProperty.correctType(true),
		typeArguments <- if (umlProperty.upper = 1) then
				Sequence{}
			else
				Sequence{typeArgument}
			endif
	),
	typeArgument : java!QualifiedTypeArgument(
		typeReference <- typeRef2
	),
	typeRef2 : java!ClassifierReference (
		target <- umlProperty.correctType(false)
	)
}

rule Operation {
	from umlOperation : uml!Operation
	to javaMethod : java!ClassMethod (
		name <- umlOperation.name,
		typeReference <- if umlOperation.type = OclUndefined  then
					voidType
				  else
				  	typeRef
				  endif,
		statements <- body,
		annotationsAndModifiers <- Sequence{public} --TODO inspect visibility defined in UML
	),
	--return type
	typeRef : java!ClassifierReference (
		target <- umlOperation.correctType(true)
	),
	voidType : java!Void (
	),
	-- empty body with slot
	body : java!Block ( 
	--	statements <- Sequence{slot}
	--),
	--slot : java!StatementSlot (
	--	pointName <- umlOperation.name, 
	--	portName <- umlOperation.class.package.name
	),
	public : java!Public (
	)
	
}